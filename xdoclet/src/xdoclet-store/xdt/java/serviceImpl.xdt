package <XDtConfig:configParameterValue paramName="package"/>.service.impl;

import java.util.ArrayList;
import java.util.List;

import <XDtConfig:configParameterValue paramName="package"/>.bean.<XDtXClass:className/>Id;
import <XDtConfig:configParameterValue paramName="package"/>.bean.<XDtXClass:className/>Search;
import <XDtConfig:configParameterValue paramName="package"/>.domain.<XDtXClass:className/>;
<XDtXEntity:forAllHeaderEntityTypes>import <XDtConfig:configParameterValue paramName="package"/>.domain.<XDtXClass:className/>;</XDtXEntity:forAllHeaderEntityTypes>
import <XDtConfig:configParameterValue paramName="package"/>.service.I<XDtXClass:className/>Service;


public class <XDtXClass:className/>Service implements I<XDtXClass:className/>Service{

	public List<<XDtXClass:className/>> search(<XDtXClass:className/>Search <XDtXClass:className lowerCase="true"/>Search){
		List<<XDtXClass:className/>> list=new ArrayList<<XDtXClass:className/>>();
		for(int i=0; i<10; i++){
			list.add(generate<XDtXClass:className/>(i));
		}
		return list;
	}
	
	public <XDtXClass:className/> find(<XDtXClass:className/>Id <XDtXClass:className lowerCase="true"/>Id){
		return generate<XDtXClass:className/>(0);
	}
	
	private <XDtXClass:className/> generate<XDtXClass:className/>(int cont){
		<XDtXClass:className/> <XDtXClass:className lowerCase="true"/>=new <XDtXClass:className/>();
		<XDtXEntity:forAllHeaderEntities>
		
		<XDtXClass:className lowerCase="true"/><XDtXEntity:forAllHeaderEntitiesFields><XDtXEntity:ifIsLastEntity>.set<XDtXField:getCapitalizedFieldName/>(new <XDtXField:fieldType/>());</XDtXEntity:ifIsLastEntity><XDtXEntity:ifIsLastEntity condition="false">.get<XDtXField:getCapitalizedFieldName/>()</XDtXEntity:ifIsLastEntity></XDtXEntity:forAllHeaderEntitiesFields>
		
		</XDtXEntity:forAllHeaderEntities>
		<XDtXField:forAllHeaderFields>
		<XDtXField:headerRootClassName lowerCase="true"/>
			<XDtXField:forAllHeaderFieldsSubFields>
				<XDtXField:ifIsLastSubfield condition="false">.get<XDtXField:headerSubfieldName capitalize="true"/>()
				</XDtXField:ifIsLastSubfield>
				<XDtXField:ifIsLastSubfield>.set<XDtXField:getCapitalizedFieldName/>(
					<XDtXField:ifIsBinaryClass>
						<XDtXField:ifIsOfType type="java.util.Calendar">
							java.util.Calendar.getInstance()
						</XDtXField:ifIsOfType>	
						<XDtXField:ifIsOfType type="java.util.Date">
							java.util.Calendar.getInstance().getTime()
						</XDtXField:ifIsOfType>
						<XDtXField:ifIsOfType type="java.lang.Character">
							java.lang.String.valueOf(cont).charAt(0)
						</XDtXField:ifIsOfType>	
						<XDtXField:ifIsOfType type="java.lang.Boolean,java.lang.Byte,java.lang.Double,java.lang.Float,java.lang.Integer,java.lang.Long,java.lang.Short,java.math.BigDecimal">
							new <XDtXField:fieldType/>(java.lang.String.valueOf(cont))
						</XDtXField:ifIsOfType>
						<XDtXField:ifIsOfType type="java.lang.String">
							java.lang.String.valueOf(cont)
						</XDtXField:ifIsOfType>
						<XDtXField:ifIsOfType type="java.util.List">
							new java.util.ArrayList<<XDtXField:fieldGenericType/>>()
						</XDtXField:ifIsOfType>
						
						
					</XDtXField:ifIsBinaryClass>
					<XDtXField:ifIsPrimitive>
						<XDtXField:ifIsOfType type="byte">
							new java.lang.Byte(java.lang.String.valueOf(cont)).byteValue()
						</XDtXField:ifIsOfType>
						<XDtXField:ifIsOfType type="short">
							new java.lang.Short(java.lang.String.valueOf(cont)).shortValue()
						</XDtXField:ifIsOfType>
						<XDtXField:ifIsOfType type="boolean">
							new java.lang.Boolean(java.lang.String.valueOf(cont)).booleanValue()
						</XDtXField:ifIsOfType>
						<XDtXField:ifIsOfType type="char">
							java.lang.String.valueOf(cont).charAt(0)
						</XDtXField:ifIsOfType>
						<XDtXField:ifIsOfType type="int, long, float, double">
							cont
						</XDtXField:ifIsOfType>
						
							
					</XDtXField:ifIsPrimitive>
					);
					
					
					
					
				</XDtXField:ifIsLastSubfield>
			
			</XDtXField:forAllHeaderFieldsSubFields>
		
		
			
			
				
		</XDtXField:forAllHeaderFields>
		return <XDtXClass:className lowerCase="true"/>;
	}
	
	
	public void create(<XDtXClass:className/> <XDtXClass:className lowerCase="true"/>){
		// TODO
	}
	
	
	public void update(<XDtXClass:className/> <XDtXClass:className lowerCase="true"/>){
		// TODO
	}
	
	
	public void delete(<XDtXClass:className/>Id <XDtXClass:className lowerCase="true"/>Id){
		// TODO
	}
	
	
}